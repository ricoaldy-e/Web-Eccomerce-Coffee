// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PROCESSED
  SHIPPED
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  EWALLET
}

model User {
  id           Int       @id @default(autoincrement())
  name         String
  email        String    @unique
  passwordHash String    @map("password_hash")
  role         Role      @default(USER)
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")

  carts    Cart[]
  orders   Order[]
  payments Payment[]

  @@map("users")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  products Product[]

  @@map("categories")
}

model Product {
  id        Int       @id @default(autoincrement())
  name      String
  slug      String    @unique
  price     Decimal   @db.Decimal(12, 2)
  stock     Int       @default(0)
  description String?   @map("description")
  imageUrl  String?   @map("image_url")
  isActive  Boolean   @default(true) @map("is_active")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  categoryId Int      @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  cartItems  CartItem[]
  orderItems OrderItem[]

  @@index([categoryId])
  @@index([name])
  @@map("products")
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@map("carts")
}

model CartItem {
  id        Int @id @default(autoincrement())
  cartId    Int @map("cart_id")
  productId Int @map("product_id")
  qty       Int @default(1)

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@unique([cartId, productId])
  @@map("cart_items")
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int         @map("user_id")
  total       Decimal     @db.Decimal(12, 2)
  status      OrderStatus @default(PROCESSED)
  addressText String      @map("address_text")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  user    User        @relation(fields: [userId], references: [id], onDelete: Restrict)
  items   OrderItem[]
  payment Payment?

  @@index([userId])
  @@index([status])
  @@index([userId, createdAt])
  @@index([status, createdAt])
  @@map("orders")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int     @map("order_id")
  productId Int     @map("product_id")
  price     Decimal @db.Decimal(12, 2)
  qty       Int     @default(1)
  subtotal  Decimal @db.Decimal(12, 2)

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@unique([orderId, productId])
  @@map("order_items")
}

model Payment {
  id        Int           @id @default(autoincrement())
  orderId   Int           @unique @map("order_id")
  method    PaymentMethod
  status    PaymentStatus @default(PENDING)
  proofUrl  String?       @map("proof_url")
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  order  Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  userId Int?  @map("user_id")
  user   User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("payments")
}
